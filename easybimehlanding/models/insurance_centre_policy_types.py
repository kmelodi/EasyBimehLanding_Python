# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class InsuranceCentrePolicyTypes(object):

    """Implementation of the 'InsuranceCentrePolicyTypes' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        title (string): TODO: type description here.
        icon_image (string): TODO: type description here.
        is_active (bool): TODO: type description here.
        routing_url (string): TODO: type description here.
        display_priority (string): TODO: type description here.
        icon_position (int): TODO: type description here.
        general_terms (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "title":'title',
        "icon_image":'iconImage',
        "is_active":'isActive',
        "routing_url":'routingUrl',
        "icon_position":'iconPosition',
        "display_priority":'displayPriority',
        "general_terms":'generalTerms'
    }

    def __init__(self,
                 id=None,
                 title=None,
                 icon_image=None,
                 is_active=None,
                 routing_url=None,
                 icon_position=None,
                 display_priority=None,
                 general_terms=None):
        """Constructor for the InsuranceCentrePolicyTypes class"""

        # Initialize members of the class
        self.id = id
        self.title = title
        self.icon_image = icon_image
        self.is_active = is_active
        self.routing_url = routing_url
        self.display_priority = display_priority
        self.icon_position = icon_position
        self.general_terms = general_terms


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        title = dictionary.get('title')
        icon_image = dictionary.get('iconImage')
        is_active = dictionary.get('isActive')
        routing_url = dictionary.get('routingUrl')
        icon_position = dictionary.get('iconPosition')
        display_priority = dictionary.get('displayPriority')
        general_terms = dictionary.get('generalTerms')

        # Return an object of this model
        return cls(id,
                   title,
                   icon_image,
                   is_active,
                   routing_url,
                   icon_position,
                   display_priority,
                   general_terms)


