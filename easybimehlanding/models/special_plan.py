# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class SpecialPlan(object):

    """Implementation of the 'SpecialPlan' model.

    TODO: type model description here.

    Attributes:
        key (int): TODO: type description here.
        count (int): TODO: type description here.
        title (string): TODO: type description here.
        policy_type (int): TODO: type description here.
        display (string): TODO: type description here.
        icon_position (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key":'key',
        "count":'count',
        "title":'title',
        "policy_type":'policyType',
        "icon_position":'iconPosition',
        "display":'display'
    }

    def __init__(self,
                 key=None,
                 count=None,
                 title=None,
                 policy_type=None,
                 icon_position=None,
                 display=None):
        """Constructor for the SpecialPlan class"""

        # Initialize members of the class
        self.key = key
        self.count = count
        self.title = title
        self.policy_type = policy_type
        self.display = display
        self.icon_position = icon_position


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        key = dictionary.get('key')
        count = dictionary.get('count')
        title = dictionary.get('title')
        policy_type = dictionary.get('policyType')
        icon_position = dictionary.get('iconPosition')
        display = dictionary.get('display')

        # Return an object of this model
        return cls(key,
                   count,
                   title,
                   policy_type,
                   icon_position,
                   display)


