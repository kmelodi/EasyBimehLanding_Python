# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class FaqInsuranceCentre(object):

    """Implementation of the 'Faq/InsuranceCentre' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        insurance_centre_id (int): TODO: type description here.
        question (string): TODO: type description here.
        answer (string): TODO: type description here.
        sort_priority (int): TODO: type description here.
        question_group_param_id (int): TODO: type description here.
        is_active (bool): TODO: type description here.
        the_insurance_centre (string): TODO: type description here.
        the_question_group_param (string): TODO: type description here.
        create_on (string): TODO: type description here.
        update_on (string): TODO: type description here.
        created_by (string): TODO: type description here.
        updated_by (string): TODO: type description here.
        create_on_persian_date (string): TODO: type description here.
        update_on_persian_date (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "insurance_centre_id":'insuranceCentreId',
        "question":'question',
        "answer":'answer',
        "question_group_param_id":'questionGroupParamId',
        "is_active":'isActive',
        "create_on":'createOn',
        "update_on":'updateOn',
        "created_by":'createdBy',
        "create_on_persian_date":'createOnPersianDate',
        "update_on_persian_date":'updateOnPersianDate',
        "sort_priority":'sortPriority',
        "the_insurance_centre":'theInsuranceCentre',
        "the_question_group_param":'theQuestionGroupParam',
        "updated_by":'updatedBy'
    }

    def __init__(self,
                 id=None,
                 insurance_centre_id=None,
                 question=None,
                 answer=None,
                 question_group_param_id=None,
                 is_active=None,
                 create_on=None,
                 update_on=None,
                 created_by=None,
                 create_on_persian_date=None,
                 update_on_persian_date=None,
                 sort_priority=None,
                 the_insurance_centre=None,
                 the_question_group_param=None,
                 updated_by=None):
        """Constructor for the FaqInsuranceCentre class"""

        # Initialize members of the class
        self.id = id
        self.insurance_centre_id = insurance_centre_id
        self.question = question
        self.answer = answer
        self.sort_priority = sort_priority
        self.question_group_param_id = question_group_param_id
        self.is_active = is_active
        self.the_insurance_centre = the_insurance_centre
        self.the_question_group_param = the_question_group_param
        self.create_on = create_on
        self.update_on = update_on
        self.created_by = created_by
        self.updated_by = updated_by
        self.create_on_persian_date = create_on_persian_date
        self.update_on_persian_date = update_on_persian_date


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        insurance_centre_id = dictionary.get('insuranceCentreId')
        question = dictionary.get('question')
        answer = dictionary.get('answer')
        question_group_param_id = dictionary.get('questionGroupParamId')
        is_active = dictionary.get('isActive')
        create_on = dictionary.get('createOn')
        update_on = dictionary.get('updateOn')
        created_by = dictionary.get('createdBy')
        create_on_persian_date = dictionary.get('createOnPersianDate')
        update_on_persian_date = dictionary.get('updateOnPersianDate')
        sort_priority = dictionary.get('sortPriority')
        the_insurance_centre = dictionary.get('theInsuranceCentre')
        the_question_group_param = dictionary.get('theQuestionGroupParam')
        updated_by = dictionary.get('updatedBy')

        # Return an object of this model
        return cls(id,
                   insurance_centre_id,
                   question,
                   answer,
                   question_group_param_id,
                   is_active,
                   create_on,
                   update_on,
                   created_by,
                   create_on_persian_date,
                   update_on_persian_date,
                   sort_priority,
                   the_insurance_centre,
                   the_question_group_param,
                   updated_by)


