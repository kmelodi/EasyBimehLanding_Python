# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class PopupImageGalleryie(object):

    """Implementation of the 'PopupImageGalleryie' model.

    TODO: type model description here.

    Attributes:
        cached (bool): TODO: type description here.
        url (string): TODO: type description here.
        thumbnail_url (string): TODO: type description here.
        alt_text (string): TODO: type description here.
        title (string): TODO: type description here.
        ext_url (string): TODO: type description here.
        ext_url_target (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cached":'_cached',
        "url":'url',
        "thumbnail_url":'thumbnailUrl',
        "alt_text":'altText',
        "title":'title',
        "ext_url":'extUrl',
        "ext_url_target":'extUrlTarget'
    }

    def __init__(self,
                 cached=None,
                 url=None,
                 thumbnail_url=None,
                 alt_text=None,
                 title=None,
                 ext_url=None,
                 ext_url_target=None):
        """Constructor for the PopupImageGalleryie class"""

        # Initialize members of the class
        self.cached = cached
        self.url = url
        self.thumbnail_url = thumbnail_url
        self.alt_text = alt_text
        self.title = title
        self.ext_url = ext_url
        self.ext_url_target = ext_url_target


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        cached = dictionary.get('_cached')
        url = dictionary.get('url')
        thumbnail_url = dictionary.get('thumbnailUrl')
        alt_text = dictionary.get('altText')
        title = dictionary.get('title')
        ext_url = dictionary.get('extUrl')
        ext_url_target = dictionary.get('extUrlTarget')

        # Return an object of this model
        return cls(cached,
                   url,
                   thumbnail_url,
                   alt_text,
                   title,
                   ext_url,
                   ext_url_target)


