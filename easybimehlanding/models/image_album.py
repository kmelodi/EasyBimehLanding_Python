# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import easybimehlanding.models.popup_image_galleryie
import easybimehlanding.models.gallery_detail

class ImageAlbum(object):

    """Implementation of the 'ImageAlbum' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        gallery_type (int): TODO: type description here.
        title (string): TODO: type description here.
        alt (string): TODO: type description here.
        description (string): TODO: type description here.
        is_active (bool): TODO: type description here.
        is_main (bool): TODO: type description here.
        is_attach_file (bool): TODO: type description here.
        sort_priority (string): TODO: type description here.
        create_on_persian_date (string): TODO: type description here.
        meta_media_file_id (int): TODO: type description here.
        meta_media_file_url (string): TODO: type description here.
        meta_media_file_thumbnail_url (string): TODO: type description here.
        popup_image_galleryies (list of PopupImageGalleryie): TODO: type
            description here.
        gallery_details (list of GalleryDetail): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "gallery_type":'galleryType',
        "title":'title',
        "is_active":'isActive',
        "is_main":'isMain',
        "is_attach_file":'isAttachFile',
        "create_on_persian_date":'createOnPersianDate',
        "meta_media_file_id":'metaMediaFileId',
        "meta_media_file_url":'metaMediaFileUrl',
        "meta_media_file_thumbnail_url":'metaMediaFileThumbnailUrl',
        "popup_image_galleryies":'popupImageGalleryies',
        "gallery_details":'galleryDetails',
        "alt":'alt',
        "description":'description',
        "sort_priority":'sortPriority'
    }

    def __init__(self,
                 id=None,
                 gallery_type=None,
                 title=None,
                 is_active=None,
                 is_main=None,
                 is_attach_file=None,
                 create_on_persian_date=None,
                 meta_media_file_id=None,
                 meta_media_file_url=None,
                 meta_media_file_thumbnail_url=None,
                 popup_image_galleryies=None,
                 gallery_details=None,
                 alt=None,
                 description=None,
                 sort_priority=None):
        """Constructor for the ImageAlbum class"""

        # Initialize members of the class
        self.id = id
        self.gallery_type = gallery_type
        self.title = title
        self.alt = alt
        self.description = description
        self.is_active = is_active
        self.is_main = is_main
        self.is_attach_file = is_attach_file
        self.sort_priority = sort_priority
        self.create_on_persian_date = create_on_persian_date
        self.meta_media_file_id = meta_media_file_id
        self.meta_media_file_url = meta_media_file_url
        self.meta_media_file_thumbnail_url = meta_media_file_thumbnail_url
        self.popup_image_galleryies = popup_image_galleryies
        self.gallery_details = gallery_details


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        gallery_type = dictionary.get('galleryType')
        title = dictionary.get('title')
        is_active = dictionary.get('isActive')
        is_main = dictionary.get('isMain')
        is_attach_file = dictionary.get('isAttachFile')
        create_on_persian_date = dictionary.get('createOnPersianDate')
        meta_media_file_id = dictionary.get('metaMediaFileId')
        meta_media_file_url = dictionary.get('metaMediaFileUrl')
        meta_media_file_thumbnail_url = dictionary.get('metaMediaFileThumbnailUrl')
        popup_image_galleryies = None
        if dictionary.get('popupImageGalleryies') != None:
            popup_image_galleryies = list()
            for structure in dictionary.get('popupImageGalleryies'):
                popup_image_galleryies.append(easybimehlanding.models.popup_image_galleryie.PopupImageGalleryie.from_dictionary(structure))
        gallery_details = None
        if dictionary.get('galleryDetails') != None:
            gallery_details = list()
            for structure in dictionary.get('galleryDetails'):
                gallery_details.append(easybimehlanding.models.gallery_detail.GalleryDetail.from_dictionary(structure))
        alt = dictionary.get('alt')
        description = dictionary.get('description')
        sort_priority = dictionary.get('sortPriority')

        # Return an object of this model
        return cls(id,
                   gallery_type,
                   title,
                   is_active,
                   is_main,
                   is_attach_file,
                   create_on_persian_date,
                   meta_media_file_id,
                   meta_media_file_url,
                   meta_media_file_thumbnail_url,
                   popup_image_galleryies,
                   gallery_details,
                   alt,
                   description,
                   sort_priority)


