# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class ElevatorInsurancePolicyFilter(object):

    """Implementation of the 'ElevatorInsurancePolicyFilter' model.

    TODO: type model description here.

    Attributes:
        building_use_type_param_id (string): TODO: type description here.
        elevator_type_param_id (string): TODO: type description here.
        floors (string): TODO: type description here.
        elevator_capacity_cargo (string): TODO: type description here.
        elevator_capacity (string): TODO: type description here.
        risk_level_id (string): TODO: type description here.
        insurance_policy_terms (string): TODO: type description here.
        defect_organ_coverage_id (string): TODO: type description here.
        death_capital_coverage_id (string): TODO: type description here.
        financial_coverage_id (string): TODO: type description here.
        medical_cost_coverage_id (string): TODO: type description here.
        owner_coverage (bool): TODO: type description here.
        insurance_extra_coverage_ids (string): TODO: type description here.
        policy_term_id (string): TODO: type description here.
        insurance_centre_sub_domain_name (string): TODO: type description
            here.
        insurance_centre_id (string): TODO: type description here.
        insurance_company_id (string): TODO: type description here.
        is_search_query (bool): TODO: type description here.
        gift_code (string): TODO: type description here.
        customer_user_id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "owner_coverage":'ownerCoverage',
        "is_search_query":'isSearchQuery',
        "building_use_type_param_id":'buildingUseTypeParamId',
        "elevator_type_param_id":'elevatorTypeParamId',
        "floors":'floors',
        "elevator_capacity_cargo":'elevatorCapacityCargo',
        "elevator_capacity":'elevatorCapacity',
        "risk_level_id":'riskLevelId',
        "insurance_policy_terms":'insurancePolicyTerms',
        "defect_organ_coverage_id":'defectOrganCoverageId',
        "death_capital_coverage_id":'deathCapitalCoverageId',
        "financial_coverage_id":'financialCoverageId',
        "medical_cost_coverage_id":'medicalCostCoverageId',
        "insurance_extra_coverage_ids":'insuranceExtraCoverageIds',
        "policy_term_id":'policyTermId',
        "insurance_centre_sub_domain_name":'insuranceCentreSubDomainName',
        "insurance_centre_id":'insuranceCentreId',
        "insurance_company_id":'insuranceCompanyId',
        "gift_code":'giftCode',
        "customer_user_id":'customerUserId'
    }

    def __init__(self,
                 owner_coverage=None,
                 is_search_query=None,
                 building_use_type_param_id=None,
                 elevator_type_param_id=None,
                 floors=None,
                 elevator_capacity_cargo=None,
                 elevator_capacity=None,
                 risk_level_id=None,
                 insurance_policy_terms=None,
                 defect_organ_coverage_id=None,
                 death_capital_coverage_id=None,
                 financial_coverage_id=None,
                 medical_cost_coverage_id=None,
                 insurance_extra_coverage_ids=None,
                 policy_term_id=None,
                 insurance_centre_sub_domain_name=None,
                 insurance_centre_id=None,
                 insurance_company_id=None,
                 gift_code=None,
                 customer_user_id=None):
        """Constructor for the ElevatorInsurancePolicyFilter class"""

        # Initialize members of the class
        self.building_use_type_param_id = building_use_type_param_id
        self.elevator_type_param_id = elevator_type_param_id
        self.floors = floors
        self.elevator_capacity_cargo = elevator_capacity_cargo
        self.elevator_capacity = elevator_capacity
        self.risk_level_id = risk_level_id
        self.insurance_policy_terms = insurance_policy_terms
        self.defect_organ_coverage_id = defect_organ_coverage_id
        self.death_capital_coverage_id = death_capital_coverage_id
        self.financial_coverage_id = financial_coverage_id
        self.medical_cost_coverage_id = medical_cost_coverage_id
        self.owner_coverage = owner_coverage
        self.insurance_extra_coverage_ids = insurance_extra_coverage_ids
        self.policy_term_id = policy_term_id
        self.insurance_centre_sub_domain_name = insurance_centre_sub_domain_name
        self.insurance_centre_id = insurance_centre_id
        self.insurance_company_id = insurance_company_id
        self.is_search_query = is_search_query
        self.gift_code = gift_code
        self.customer_user_id = customer_user_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        owner_coverage = dictionary.get('ownerCoverage')
        is_search_query = dictionary.get('isSearchQuery')
        building_use_type_param_id = dictionary.get('buildingUseTypeParamId')
        elevator_type_param_id = dictionary.get('elevatorTypeParamId')
        floors = dictionary.get('floors')
        elevator_capacity_cargo = dictionary.get('elevatorCapacityCargo')
        elevator_capacity = dictionary.get('elevatorCapacity')
        risk_level_id = dictionary.get('riskLevelId')
        insurance_policy_terms = dictionary.get('insurancePolicyTerms')
        defect_organ_coverage_id = dictionary.get('defectOrganCoverageId')
        death_capital_coverage_id = dictionary.get('deathCapitalCoverageId')
        financial_coverage_id = dictionary.get('financialCoverageId')
        medical_cost_coverage_id = dictionary.get('medicalCostCoverageId')
        insurance_extra_coverage_ids = dictionary.get('insuranceExtraCoverageIds')
        policy_term_id = dictionary.get('policyTermId')
        insurance_centre_sub_domain_name = dictionary.get('insuranceCentreSubDomainName')
        insurance_centre_id = dictionary.get('insuranceCentreId')
        insurance_company_id = dictionary.get('insuranceCompanyId')
        gift_code = dictionary.get('giftCode')
        customer_user_id = dictionary.get('customerUserId')

        # Return an object of this model
        return cls(owner_coverage,
                   is_search_query,
                   building_use_type_param_id,
                   elevator_type_param_id,
                   floors,
                   elevator_capacity_cargo,
                   elevator_capacity,
                   risk_level_id,
                   insurance_policy_terms,
                   defect_organ_coverage_id,
                   death_capital_coverage_id,
                   financial_coverage_id,
                   medical_cost_coverage_id,
                   insurance_extra_coverage_ids,
                   policy_term_id,
                   insurance_centre_sub_domain_name,
                   insurance_centre_id,
                   insurance_company_id,
                   gift_code,
                   customer_user_id)


