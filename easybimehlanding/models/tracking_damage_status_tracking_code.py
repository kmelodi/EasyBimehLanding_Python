# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import easybimehlanding.models.tracking_damage_file_trackin_code

class TrackingDamageStatusTrackingCode(object):

    """Implementation of the 'TrackingDamageStatus TrackingCode' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        tracking_damage_id (int): TODO: type description here.
        description (string): TODO: type description here.
        tracking_damage_status (int): TODO: type description here.
        tracking_damage_file (list of TrackingDamageFileTrackinCode): TODO:
            type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "tracking_damage_id":'trackingDamageId',
        "tracking_damage_status":'trackingDamageStatus',
        "tracking_damage_file":'trackingDamageFile',
        "description":'description'
    }

    def __init__(self,
                 id=None,
                 tracking_damage_id=None,
                 tracking_damage_status=None,
                 tracking_damage_file=None,
                 description=None):
        """Constructor for the TrackingDamageStatusTrackingCode class"""

        # Initialize members of the class
        self.id = id
        self.tracking_damage_id = tracking_damage_id
        self.description = description
        self.tracking_damage_status = tracking_damage_status
        self.tracking_damage_file = tracking_damage_file


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        tracking_damage_id = dictionary.get('trackingDamageId')
        tracking_damage_status = dictionary.get('trackingDamageStatus')
        tracking_damage_file = None
        if dictionary.get('trackingDamageFile') != None:
            tracking_damage_file = list()
            for structure in dictionary.get('trackingDamageFile'):
                tracking_damage_file.append(easybimehlanding.models.tracking_damage_file_trackin_code.TrackingDamageFileTrackinCode.from_dictionary(structure))
        description = dictionary.get('description')

        # Return an object of this model
        return cls(id,
                   tracking_damage_id,
                   tracking_damage_status,
                   tracking_damage_file,
                   description)


