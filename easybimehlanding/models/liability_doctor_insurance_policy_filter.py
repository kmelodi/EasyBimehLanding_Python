# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class LiabilityDoctorInsurancePolicyFilter(object):

    """Implementation of the 'LiabilityDoctorInsurancePolicyFilter' model.

    TODO: type model description here.

    Attributes:
        expertise_param_id (int): TODO: type description here.
        is_resident (bool): TODO: type description here.
        is_student (bool): TODO: type description here.
        risk_level_id (string): TODO: type description here.
        activity_area_param_id (int): TODO: type description here.
        commitment_ceiling_param_id (int): TODO: type description here.
        insurance_extra_coverage_ids (string): TODO: type description here.
        policy_term_id (string): TODO: type description here.
        insurance_centre_sub_domain_name (string): TODO: type description
            here.
        insurance_centre_id (string): TODO: type description here.
        insurance_company_id (string): TODO: type description here.
        is_search_query (bool): TODO: type description here.
        gift_code (string): TODO: type description here.
        customer_user_id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "expertise_param_id":'expertiseParamId',
        "is_resident":'isResident',
        "is_student":'isStudent',
        "activity_area_param_id":'activityAreaParamId',
        "commitment_ceiling_param_id":'commitmentCeilingParamId',
        "is_search_query":'isSearchQuery',
        "risk_level_id":'riskLevelId',
        "insurance_extra_coverage_ids":'insuranceExtraCoverageIds',
        "policy_term_id":'policyTermId',
        "insurance_centre_sub_domain_name":'insuranceCentreSubDomainName',
        "insurance_centre_id":'insuranceCentreId',
        "insurance_company_id":'insuranceCompanyId',
        "gift_code":'giftCode',
        "customer_user_id":'customerUserId'
    }

    def __init__(self,
                 expertise_param_id=None,
                 is_resident=None,
                 is_student=None,
                 activity_area_param_id=None,
                 commitment_ceiling_param_id=None,
                 is_search_query=None,
                 risk_level_id=None,
                 insurance_extra_coverage_ids=None,
                 policy_term_id=None,
                 insurance_centre_sub_domain_name=None,
                 insurance_centre_id=None,
                 insurance_company_id=None,
                 gift_code=None,
                 customer_user_id=None):
        """Constructor for the LiabilityDoctorInsurancePolicyFilter class"""

        # Initialize members of the class
        self.expertise_param_id = expertise_param_id
        self.is_resident = is_resident
        self.is_student = is_student
        self.risk_level_id = risk_level_id
        self.activity_area_param_id = activity_area_param_id
        self.commitment_ceiling_param_id = commitment_ceiling_param_id
        self.insurance_extra_coverage_ids = insurance_extra_coverage_ids
        self.policy_term_id = policy_term_id
        self.insurance_centre_sub_domain_name = insurance_centre_sub_domain_name
        self.insurance_centre_id = insurance_centre_id
        self.insurance_company_id = insurance_company_id
        self.is_search_query = is_search_query
        self.gift_code = gift_code
        self.customer_user_id = customer_user_id


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        expertise_param_id = dictionary.get('expertiseParamId')
        is_resident = dictionary.get('isResident')
        is_student = dictionary.get('isStudent')
        activity_area_param_id = dictionary.get('activityAreaParamId')
        commitment_ceiling_param_id = dictionary.get('commitmentCeilingParamId')
        is_search_query = dictionary.get('isSearchQuery')
        risk_level_id = dictionary.get('riskLevelId')
        insurance_extra_coverage_ids = dictionary.get('insuranceExtraCoverageIds')
        policy_term_id = dictionary.get('policyTermId')
        insurance_centre_sub_domain_name = dictionary.get('insuranceCentreSubDomainName')
        insurance_centre_id = dictionary.get('insuranceCentreId')
        insurance_company_id = dictionary.get('insuranceCompanyId')
        gift_code = dictionary.get('giftCode')
        customer_user_id = dictionary.get('customerUserId')

        # Return an object of this model
        return cls(expertise_param_id,
                   is_resident,
                   is_student,
                   activity_area_param_id,
                   commitment_ceiling_param_id,
                   is_search_query,
                   risk_level_id,
                   insurance_extra_coverage_ids,
                   policy_term_id,
                   insurance_centre_sub_domain_name,
                   insurance_centre_id,
                   insurance_company_id,
                   gift_code,
                   customer_user_id)


