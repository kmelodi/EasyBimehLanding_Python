# -*- coding: utf-8 -*-

"""
    easybimehlanding

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from easybimehlanding.api_helper import APIHelper
from easybimehlanding.configuration import Configuration
from easybimehlanding.controllers.base_controller import BaseController
from easybimehlanding.models.other_insurance_types import OtherInsuranceTypes
from easybimehlanding.models.send_sms_token import SendSmsToken
from easybimehlanding.models.status_200 import Status200
from easybimehlanding.exceptions.status_400_exception import Status400Exception

class OtherInsuranceTypesController(BaseController):

    """A Controller to access Endpoints in the easybimehlanding API."""


    def get_other_insurance_types(self,
                                  sub_domain,
                                  x_api_key):
        """Does a GET request to /ComboData/OtherInsuranceTypes.

        دریافت لیست سایر بیمه نامه ها

        Args:
            sub_domain (string): دامنه یا زیر دامنه ی مرکز بیمه
            x_api_key (string): کلید اختصاصی ارتباط با سرور

        Returns:
            OtherInsuranceTypes: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/ComboData/OtherInsuranceTypes'
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'subDomain': sub_domain
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'x-api-key': x_api_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, OtherInsuranceTypes.from_dictionary)

    def get_send_sms_token(self,
                           mobile,
                           insurance_centre_sub_domain,
                           x_api_key):
        """Does a GET request to /Account/SendSmsToken.

        ارسال توکن تایید شماره تماس، برای احراز هویت کاربر

        Args:
            mobile (string): شماره موبایل
            insurance_centre_sub_domain (string): دامنه یا زیردامنه ی مرکز
                بیمه
            x_api_key (string): کلید اختصاصی ارتباط با سرور

        Returns:
            SendSmsToken: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Account/SendSmsToken'
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'mobile': mobile,
            'insuranceCentreSubDomain': insurance_centre_sub_domain
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'x-api-key': x_api_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SendSmsToken.from_dictionary)

    def get_verify_sms_token(self,
                             mobile,
                             token,
                             insurance_centre_sub_domain,
                             alias_name,
                             resource,
                             x_api_key):
        """Does a GET request to /Account/verifySmsToken.

        تایید توکن پیامک شده به کاربر، برای احراز هویت

        Args:
            mobile (string): شماره موبایل
            token (int): توکن دریافتی کاربر از پیامک
            insurance_centre_sub_domain (string): دامنه یا زیر دامنه ی اختصاصی
                مرکز بیمه
            alias_name (string): نام و نام خانوادگی کاربر
            resource (string): دامنه ی درخواست دهنده
            x_api_key (string): کلید اختصاصی ارتباط با سرور

        Returns:
            Status200: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/Account/verifySmsToken'
        _query_builder = Configuration.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'mobile': mobile,
            'token': token,
            'insuranceCentreSubDomain': insurance_centre_sub_domain,
            'aliasName': alias_name,
            'resource': resource
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'x-api-key': x_api_key
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise Status400Exception('Bad Request', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Status200.from_dictionary)
